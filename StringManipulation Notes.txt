String Manipulation 
------------------------------------------------------------------
String
StringBuffer
StringBuilder
StringTokenizer
---------------------------------------------------------------------
String data means to represent group of characters or character array enclosed within double qoutes.

String vs StringBuffer
Case1:
String & StringBuffer both are final classes present in java.lang package. We can not extend final classes.
---------------------------------------------
Case2:
two approaches to create String objects
	a) without using new operator. This approach also known as String literal approach
	b) by using new operator
one approach to create StringBuffer object
	a) by using new operator

class StringOne 
{
	public static void main(String[] args) 
	{
		String s1 = "ramu";
		System.out.println(s1);

		String s2 = new String("raghu");
		System.out.println(s2);

		//two approaches are available to create String object

		StringBuffer s3 = new StringBuffer("raghuramu");
		System.out.println(s3);
		//one approach is available to create StringBuffer object
	}
}
-----------------------------------------------
== operator: (double equal operator)
references comparision, it returns boolean value.
If two reference variables are pointing to same object it retunrs TRUE otherwise it returns FALSE

-------------------------------------------------------------------
Case3:
* We can not perform modifications to existed String object. This nature is called immutable nature.
* We can perform modifications to existed StringBuffer object. This nature is called mutable nature.
class StringTwo 
{
	public static void main(String[] args) 
	{
		String s1 = "Ramu";
		s1.concat("Bej");
		System.out.println(s1);
		StringBuffer s2 = new StringBuffer ("Ram");
		s2.append("Bej");
		System.out.println(s2);
	}
}
------------------------------------------------------------
Case 4:
toString()
when we print reference variable in Java toString() method will be executed.
class StringThree 
{
	public static void main(String[] args) 
	{
		StringThree st = new StringThree();
		System.out.println(st);
		System.out.println(st.toString());
	}
}
----------
toString() method rerurn type is always String type. 
------------
class Object {
	public String toString(){
	return "class-name@hashcode";
}
}
---------
hashcode means unique identification of object. Its generated by JVM its a hexadecimal number.
---------------------------------------
example2:



